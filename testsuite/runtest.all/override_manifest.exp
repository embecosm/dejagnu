# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
# 2001, 2002, 2003, 2016 Free Software Foundation, Inc.
#
# This file is part of DejaGnu.
#
# DejaGnu is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# DejaGnu is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DejaGnu; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.

# This file was written by Graham Markall <graham.markall@embecosm.com>.

load_lib override.exp

# Use our own override_log proc for testing

rename override_log saved_override_log

proc override_log { msg } {
    global override_log_msg
    set override_log_msg [concat $override_log_msg $msg]
}

proc clear_override_log { } {
    global override_log_msg
    set override_log_msg ""
}

clear_override_log

# Some lines that are valid when read by read_manifest_line

set valid_lines { "PASS: blah.c \[-flag1\] \[subtest1\] \[34\] # VLA"
                  "PASS: blah.c \[-flag2\] \[subtest2\] # VLA"
                  "PASS: blah.c \[-flag3\] # VLA"
                  "XFAIL: blah.c # VLA"
                  "UNSUPPORTED: blah2.c"
                  "PASS: blah3.c" }

set invalid_lines { "PASS blah.c" }

foreach valid_line $valid_lines {
    set result [read_manifest_line $valid_line]
    if { [dict get $result match] == 1 } {
        pass "Valid line ... $valid_line"
    } {
        fail "Unexpected invalid line ... $result ... $valid_line"
    }
}

foreach invalid_line $invalid_lines {
    set result [read_manifest_line $invalid_line]
    set match [dict get $result match]
    if { [dict get $result match ] == 0 } {
        pass "Invalid line ... $invalid_line"
    } {
        fail "Unexpected valid line ... $invalid_line"
    }
}

clear_override_log

# Check that the valid lines are correctly read into the override dict

set override_dict [read_override_manifest $valid_lines]
set k [dict keys $override_dict]
puts "keys $k"

if { [llength [dict keys $override_dict]] == 6 } {
    pass "Correct number of entries in override dict"
} {
    fail "Incorrect number of entries in override dict"
}

set pass_keys { {blah.c,-flag1,subtest1,34} {blah.c,-flag2,subtest2,} {blah.c,-flag3,,} {blah3.c,,,} }
foreach key $pass_keys {
    if { [dict get $pass_keys $key] == "PASS" } {
        pass "Expected pass in dict"
    } {
        fail "Expected pass in is something else in dict"
    }
}

#for {set i 0} {$i < 5} {incr i} {
#    set actual_entry [lindex $entry $i]
#    set expected_entry [lindex $expected_entries $i]
#    if { $actual_entry == $expected_entry } {
#        pass "Override dict entry matches"
#    } {
#        fail "Override dict entry does not match"
#    }
#}
#
## Entry for blah2.c
#set entry [dict get $override_dict "blah2.c"]
#if { [llength $entry] == 1 } {
#    pass "Correct number of entries in override dict"
#} {
#    fail "Incorrect number of entries in override dict"
#}

set actual_entry [lindex $entry $i]
set expected_entry [lindex $expected_entries $i]
if { $actual_entry == $expected_entry } {
    pass "Override dict entry matches"
} {
    fail "Override dict entry does not match"
}

puts $override_log_msg

clear_override_log

# Check that querying the override log provides the correct results

# Ensure preconditions are met - signal that the override manifest is loaded:
set override_manifest_loaded 1

# Things not in the override dict should be absent
if { [query_override "blah4.c" "" "" ""] == "ABSENT" } {
    pass "Files not in override dict are absent"
} {
    fail "Files not in override dict should be absent"
}

# blah2.c should be unsupported
if { [query_override "blah2.c" "" "" ""] == "UNSUPPORTED" } {
    pass "Unsupported tests return UNSUPPORTED"
} {
    fail "Unsupported test did not return UNSUPPORTED"
}

# Blah.c with no flags is expected to fail
if { [query_override "blah.c" "" "" ""] == "XFAIL" } {
    pass "Expected to fail tests return XFAIL"
} {
    fail "Expected to fail test did not return XFAIL"
}

# Trailing non-comment characters on the end of a line

set trailing_chars { "PASS: blah.c \[-funroll-loops\] \[pr12\] \[33\] err" }

set result [read_override_manifest $trailing_chars]
if { $result != "" } {
    fail "Unexpected match of trailing non-comment characters"
} {
    if { [string compare -length 19 "Trailing characters" $override_log_msg] == 0 } {
        pass "Trailing characters rejected"
    } {
        fail "Trailing characters should not be accepted"
    }
}

clear_override_log

# Invalid new result value

set invalid_new_value { "EXPLODE: bomb.c" }

set result [read_override_manifest $invalid_new_value]
if { $result != "" } {
    fail "Unexpected match of invalid new result value"
} {
    if { [string compare -length 14 "Invalid result" $override_log_msg] == 0 } {
        pass "Invalid result rejected"
    } {
        fail "Invalid result should not be accepted"
    }
}

clear_override_log

# Restore the original override_log proc

unset override_log_msg
rename override_log ""
rename saved_override_log override_log
